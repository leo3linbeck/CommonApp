include('Javascript/jspdf.js');L3 = L3 || {};L3.SERVER_URL = require(getFolder('path') + 'Javascript/server.url').get_server_url();L3.gradeMap = {	'-2': 'EE', '-1': 'PK', '0': 'K',	'1': '1st', '2': '2nd', '3': '3rd', '4': '4th', '5': '5th',	'6': '6th', '7': '7th', '8': '8th',	'9': '9th', '10': '10th', '11': '11th', '12': '12th',	'13': 'Post Grad',	'999': 'Not Sure'}L3.initializePDFParams = function initializePDFParams(currentPerson) {	var p = {		orient: 'portrait',		unit: 'in',		format: 'letter',		margin: {			top: 0.5,			left: 0.5,			bottom: 0.5,			right: 0.5		}	};		p.header = {		xStart: 0,		yStart: 0,		indent: 1.5,		fontStyle: 'normal',		fontSize: 14,		lineHeight: 0.25,		breakLine: {			x1: 0.5,			x2: 8.0,			y: 1.5,			yGap: 0.03,			thickness: 1/500		}	};		p.school = {		xStart: 0,		yStart: 1.4,		fontStyle: 'normal',		fontSize: 12,		lineHeight: 0.25,		nameIndent: 0.8,		infoIndent: 4.8,		infoTitleIndent: 1.5,		vertLine: {			x: 5.0,			y1: 1.6,			y2: 3.9,			thickness: 1/500		},		breakLine: {			x1: 0.5,			x2: 8.0,			y: 4.0,			yGap: 0.03,			thickness: 1/500		}	};		p.directions = {		xCol1: 25,		xCol2: 100,		xCol3: 180,		xCol4: 190,		yStart: 200,		elementLine: {			x1: 21,			x2: 178,			y: 3,			thickness: 1		},		breakLine: {			x1: 10,			x2: 198,			y: 3,			thickness: 2		}	};		p.box = {		x: 10,		y: 58,		h: 220,		w: 190,		thickness: 2	};			return p;}	L3.addHeaderToPage = function addHeaderToPDF(doc, params, family) {	var h = params.header;	var x = h.xStart + params.margin.left;	var y = h.yStart + params.margin.top;		doc.setFontStyle(h.fontStyle)		.setFontSize(parseInt(h.fontSize * 1.25))		.text('Families Empowered School Search', x, y)		.setFontSize(h.fontSize)		.text('For the address:', x, y += 2 * h.lineHeight)		.text(family.mainUSPSLine1, x += h.indent, y)		.text(family.mainUSPSLine2, x, y += h.lineHeight)		.setLineWidth(h.breakLine.thickness)		.line(h.breakLine.x1, h.breakLine.y, h.breakLine.x2, h.breakLine.y)		.line(h.breakLine.x1, h.breakLine.y + h.breakLine.yGap, h.breakLine.x2, h.breakLine.y + h.breakLine.yGap);}L3.addSchoolToPage = function addSchoolToPage(doc, params, option) {	var s = params.school;	var x = s.xStart + params.margin.left;	var y = s.yStart + params.margin.top;		doc.setFontStyle(s.fontStyle)		.setFontSize(s.fontSize)		.text('Name:', x, y)		.text(option.schoolName ? option.schoolName : '', x + s.nameIndent, y)		.text('Address:', x, y += 1.5 * s.lineHeight)		.text(option.schoolUSPSLine1 ? option.schoolUSPSLine1 : '', x + s.nameIndent, y)		.text(option.schoolUSPSLine2 ? option.schoolUSPSLine2 : '', x + s.nameIndent, y += s.lineHeight)		.text('Phone:', x, y += 1.5 * s.lineHeight)		.text(option.schoolPhone ? option.schoolPhone : '', x + s.nameIndent, y)		.text('Email:', x, y += 1.5 * s.lineHeight)		.text(option.schoolEmail ? option.schoolEmail : '', x + s.nameIndent, y)		.text('Website:', x, y += 1.5 * s.lineHeight)		.text(option.schoolURL ? option.schoolURL : '', x + s.nameIndent, y);			x = s.xStart + + s.infoIndent + params.margin.left;	y = s.yStart + params.margin.top;	doc.text('Grades:', x, y)		.text(L3.gradeMap[option.schoolStart] + ' through ' + L3.gradeMap[option.schoolEnd], x + s.infoTitleIndent, y)		.text('Size:', x, y += 1.5 * s.lineHeight)		.text(option.schoolEnroll ? option.schoolEnroll.toString() + ' students' : '', x + s.infoTitleIndent, y)		.text('Rating:', x, y += 1.5 * s.lineHeight)		.text(option.schoolRating ? option.schoolRating.toString() + ' out of 100' : '', x + s.infoTitleIndent, y)		.text('Attendance Rate:', x, y += 1.5 * s.lineHeight)		.text(option.schoolAttend ? option.schoolAttend.toString() + '%' : '', x + s.infoTitleIndent, y)		.text('Graduation Rate:', x, y += 1.5 * s.lineHeight)		.text(option.schoolGraduate ? option.schoolGraduate.toString() + '%' : '', x + s.infoTitleIndent, y);	doc.setLineWidth(s.vertLine.thickness)		.line(s.vertLine.x, s.vertLine.y1, s.vertLine.x, s.vertLine.y2)		.setLineWidth(s.breakLine.thickness)		.line(s.breakLine.x1, s.breakLine.y, s.breakLine.x2, s.breakLine.y)		.line(s.breakLine.x1, s.breakLine.y + s.breakLine.yGap, s.breakLine.x2, s.breakLine.y + s.breakLine.yGap);}L3.getDirections = function getDirections(fromCoords, toCoords) {	return null;}L3.addDirectionsToPage = function addDirectionsToPage(doc, params, dir) {	if (dir) {			}	else {		doc.text('No directions available', params.xCol1, params.yCoord);	}}L3.addFooterToPage = function addDirectionsToPage(doc, params, dir) {}L3.generatePage = function generatePage(doc, params, family, option) {	var dir;		L3.addHeaderToPage(doc, params, family, option);	L3.addSchoolToPage(doc, params, option);	dir = L3.getDirections(family.mainMapCoords, option.schoolMapCoords);	L3.addDirectionsToPage(doc, params, dir);	L3.addFooterToPage(doc, params, dir);	doc.rect(params.box.x, params.box.y, params.box.w, params.box.h);}		L3.generatePDF = function convertBallotToPDF(family, options) {	var params = L3.initializePDFParams();	var doc = new jsPDF(params.orient, params.unit, params.format);		options.forEach(		function(o, i) {			L3.generatePage(doc, params, family, o);			if (i < (options.length - 1)) {				doc.addPage();			}		}	);		return doc.output();}L3.generatePDFFileAndURL = function generatePDFFileAndURL(family, options, folderName) {		var pdfText = L3.generatePDF(family, options);		var fldr = getFolder('path') + 'WebFolder/' + folderName + '/';	var hash = generateUUID();	var urlName = fldr + hash + '.pdf';		var f = File(urlName);	var ts = TextStream(f, 'write');	ts.write(pdfText);	ts.close();		return (L3.SERVER_URL + folderName + '/' + hash + '.pdf');}