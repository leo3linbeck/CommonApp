include('Javascript/jspdf.js');L3 = L3 || {};L3.SERVER_URL = require('server.url').get_server_url();L3.initializePDFParams = function initializePDFParams(currentPerson) {	var p = {		lineHeight: 10,		maxLines: 20,		xMargin: 10,		yMargin: 20,		xCoord: 10,		yCoord: 20	};		p.header = {		xStart: 5,		yStart: 0,		indent: 20,		fontSize: 14,		lineHeight: 14,		line: {			x1: 10,			x2: 198,			y: 3,			thickness: 2		}	};		p.school = {		xStart1: 25,		xStart2: 160,		yStart: 50,		fontSize: 12,		lineHeight: 12	};		p.directions = {		xCol1: 25,		xCol2: 100,		xCol3: 180,		xCol4: 190,		yStart: 200	};		p.box = {		x: 10,		y: 58,		h: 220,		w: 190,		thickness: 2	};		p.elementLine = {		x1: 21,		x2: 178,		y: 3,		thickness: 1	};		return p;}	L3.resetPDFParams = function resetPDFParams(p) {	p.xCoord = p.xMargin;	p.yCoord = p.yMargin;}L3.addHeaderToPDF = function addHeaderToPDF(doc, params, family) {	var h = params.header, x, y;		doc.setFontStyle('normal');		x = h.xStart + params.xMargin;	y = h.yStart + params.yMargin;	doc.setFontSize(parseInt(h.fontSize * 1.25));	doc.text('Families Empowered School Search', x, y);		doc.setFontSize(h.fontSize);	y += h.lineHeight;	doc.text('For the address:', x, y);		x += h.indent;	y += h.lineHeight;	doc.text(family.mainUSPSLine1, x, y);	y += h.lineHeight;	doc.text(family.mainUSPSLine2, x, paramy);	doc.setLineWidth(h.line.thickness);	doc.line(h.line.x1, h.line.y, h.line.x2, h.line.y);}L3.addSchoolToPage = function addSchoolToPage(doc, params, option) {	var s = params.school, x, y;		doc.setFontStyle('normal');		x = s.xStart + params.xMargin;	y = s.yStart + params.yMargin;	doc.setFontSize(s.fontSize);	doc.text('Name:', x, y);		doc.setLineWidth(s.line.thickness);	doc.line(s.line.x1, s.line.y, s.line.x2, s.line.y);}L3.getDirection = function getDirections(fromCoords, toCoords) {	}L3.addDirectionsToPage = function addDirectionsToPage(doc, params, dir) {	var dir = L3.getDirections(family.mainMapCoords, option.schoolMapCoords);	if (dir) {			}	else {		doc.text('No directions available', params.xCol1, params.yCoord);	}}L3.generatePage = function generatePage(doc, params, family, option) {	L3.addHeaderToPDF(doc, params, family, option);	L3.addSchoolToPage(doc, params, option);	L3.addDirectionsToPage(doc, params, dir);}		L3.generatePDF = function convertBallotToPDF(family, options) {	var doc = new jsPDF();	var params = initializePDFParams();		options.forEach(		function(o, i) {			L3.generatePage(doc, params, family, o);			if (i < (o.length - 1)) {				doc.addPage();			}		}	);		for (var i = 0; i < c.length; i++) {		if (lineNum++ > pdfParams.maxLines) {			doc.rect(pdfParams.box.x, pdfParams.box.y, pdfParams.box.w, pdfParams.box.h);			doc.addPage();			resetPDFParams(pdfParams);			addHeaderToPDF(doc, pdfParams);			doc.setFontStyle('normal');			lineNum = 1;		}		pdfParams.yCoord += pdfParams.lineHeight;	}	doc.rect(pdfParams.box.x, pdfParams.box.y, pdfParams.box.w, pdfParams.box.h);				return doc.output();}L3.generatePDFFileAndURL = function generatePDFFileAndURL(family, options, folderName) {		var pdfText = generatePDF(family, options);		var fldr = ds.getFolder().path + 'WebFolder/' + folderName + '/';	var hash = generateUUID();	var urlName = fldr + hash + '.pdf';		var f = File(urlName);	var ts = TextStream(f, 'write');	ts.write(pdfText);	ts.close();		return (L3.SERVER_URL + folderName + '/' + hash + '.pdf');}exports.generatePDF = function(currentPerson, debug) {	if (debug) debugger;		try {		var url = generatePDFFileAndURL(currentPerson, 'printedPages');	} catch (e) {		return ( { success: false, id: 'unableToGeneratePDF', message: 'Unable to generate PDF file.' } );	}		return ( { success: true, url: url } );}